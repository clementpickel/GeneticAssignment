Please read the README.md "Requirements" and "How to run" before starting.

For main.py with arguments 12 queens, a population of 50 and max 20 000 generations

python3 main.py 12 50 20000
result = [6, 10, 3, 7, 0, 2, 8, 5, 1, 4, 9, 11]
generation = 794
time = 0.6350429058074951 s
. . . . . . Q . . . . .
. . . . . . . . . . Q .
. . . Q . . . . . . . .
. . . . . . . Q . . . .
Q . . . . . . . . . . .
. . Q . . . . . . . . .
. . . . . . . . Q . . .
. . . . . Q . . . . . .
. Q . . . . . . . . . .
. . . . Q . . . . . . .
. . . . . . . . . Q . .
. . . . . . . . . . . Q

in case of failure a message will appear at the end with the best fitness of the last generation:

python3 main.py 12 50 200
result = [4, 8, 0, 5, 7, 10, 1, 3, 9, 6, 2, 11]
generation = 199
time = 0.1630702018737793 s
. . . . Q . . . . . . .
. . . . . . . . Q . . .
Q . . . . . . . . . . .
. . . . . Q . . . . . .
. . . . . . . Q . . . .
. . . . . . . . . . Q .
. Q . . . . . . . . . .
. . . Q . . . . . . . .
. . . . . . . . . Q . .
. . . . . . Q . . . . .
. . Q . . . . . . . . .
. . . . . . . . . . . Q
Not a solution, generation limit reached, fitness = 65 / 66.0

test.py launch multiples genetic algorithm. The result don't appear in order cause we use multithreading to shorten the process.
Test.py also produce 2 png files: SuccessRateXXX.png and TimeChartXXX.png
Last line is the total success rate and success rate by N.
test.py don't take parameter, you need to change them in the code.
Here we tried with 4 as start, 9 as end (not included) and 10 iterations of each N
The datas after '=' means is_success, generations, elapsed_time and genome.

python3 test.py 
python3 main.py 4 40 8000 = True 1 0.0004730224609375 [1, 3, 0, 2]
python3 main.py 4 40 8000 = True 0 0.0002281665802001953 [1, 3, 0, 2]
python3 main.py 4 40 8000 = True 0 0.0002453327178955078 [1, 3, 0, 2]
python3 main.py 4 40 8000 = True 0 0.00019478797912597656 [2, 0, 3, 1]
python3 main.py 4 40 8000 = True 4 0.0009868144989013672 [2, 0, 3, 1]
python3 main.py 4 40 8000 = True 2 0.0006234645843505859 [1, 3, 0, 2]
python3 main.py 4 40 8000 = True 2 0.0005962848663330078 [1, 3, 0, 2]
python3 main.py 4 40 8000 = True 1 0.0003991127014160156 [1, 3, 0, 2]
python3 main.py 4 40 8000 = True 0 0.00018167495727539062 [1, 3, 0, 2]
python3 main.py 5 50 10000 = True 2 0.0012264251708984375 [2, 4, 1, 3, 0]
python3 main.py 4 40 8000 = True 4 0.0009791851043701172 [1, 3, 0, 2]
python3 main.py 5 50 10000 = True 4 0.0022346973419189453 [2, 0, 3, 1, 4]
python3 main.py 5 50 10000 = True 4 0.0014636516571044922 [1, 3, 0, 2, 4]
python3 main.py 5 50 10000 = True 11 0.003473520278930664 [3, 0, 2, 4, 1]
python3 main.py 5 50 10000 = True 9 0.0029191970825195312 [4, 2, 0, 3, 1]
python3 main.py 5 50 10000 = True 21 0.02337336540222168 [3, 0, 2, 4, 1]
python3 main.py 5 50 10000 = True 1 0.0008935928344726562 [1, 4, 2, 0, 3]
python3 main.py 6 60 12000 = True 27 0.0236356258392334 [2, 5, 1, 4, 0, 3]
python3 main.py 5 50 10000 = True 0 0.00030732154846191406 [2, 4, 1, 3, 0]
python3 main.py 5 50 10000 = True 2 0.0017695426940917969 [4, 1, 3, 0, 2]
python3 main.py 5 50 10000 = True 0 0.000385284423828125 [4, 2, 0, 3, 1]
python3 main.py 6 60 12000 = True 21 0.23306751251220703 [2, 5, 1, 4, 0, 3]
python3 main.py 6 60 12000 = True 44 0.212815523147583 [1, 3, 5, 0, 2, 4]
python3 main.py 7 70 14000 = True 11 0.0204925537109375 [2, 0, 5, 3, 1, 6, 4]
python3 main.py 7 70 14000 = True 32 0.4184865951538086 [5, 0, 2, 4, 6, 1, 3]
python3 main.py 6 60 12000 = True 34 0.08307504653930664 [4, 2, 0, 5, 3, 1]
python3 main.py 7 70 14000 = True 5 0.003714323043823242 [2, 6, 3, 0, 4, 1, 5]
python3 main.py 6 60 12000 = True 258 0.7365827560424805 [4, 2, 0, 5, 3, 1]
python3 main.py 7 70 14000 = True 28 0.29986572265625 [2, 4, 6, 1, 3, 5, 0]
python3 main.py 7 70 14000 = True 9 0.04423236846923828 [1, 3, 5, 0, 2, 4, 6]
python3 main.py 7 70 14000 = True 40 0.21672677993774414 [2, 4, 6, 1, 3, 5, 0]
python3 main.py 7 70 14000 = True 14 0.06843948364257812 [1, 6, 4, 2, 0, 5, 3]
python3 main.py 7 70 14000 = True 15 0.14428472518920898 [3, 6, 2, 5, 1, 4, 0]
python3 main.py 8 80 16000 = True 29 0.4376950263977051 [5, 2, 6, 1, 3, 7, 0, 4]
python3 main.py 6 60 12000 = True 316 1.6520822048187256 [3, 0, 4, 1, 5, 2]
python3 main.py 8 80 16000 = True 65 0.5502593517303467 [3, 1, 6, 4, 0, 7, 5, 2]
python3 main.py 7 70 14000 = True 146 1.0370807647705078 [6, 1, 3, 5, 0, 2, 4]
python3 main.py 8 80 16000 = True 96 0.5545787811279297 [3, 5, 7, 1, 6, 0, 2, 4]
python3 main.py 8 80 16000 = True 34 0.2073206901550293 [4, 2, 7, 3, 6, 0, 5, 1]
python3 main.py 8 80 16000 = True 61 0.42642855644226074 [2, 4, 7, 3, 0, 6, 1, 5]
python3 main.py 6 60 12000 = True 328 2.1382594108581543 [2, 5, 1, 4, 0, 3]
python3 main.py 8 80 16000 = True 113 0.9211342334747314 [1, 7, 5, 0, 2, 4, 6, 3]
python3 main.py 8 80 16000 = True 164 1.46574068069458 [2, 4, 1, 7, 0, 6, 3, 5]
python3 main.py 6 60 12000 = True 795 3.3268113136291504 [2, 5, 1, 4, 0, 3]
python3 main.py 8 80 16000 = True 274 2.0085697174072266 [3, 5, 7, 2, 0, 6, 4, 1]
python3 main.py 6 60 12000 = True 1011 4.368907690048218 [1, 3, 5, 0, 2, 4]
python3 main.py 7 70 14000 = True 1293 4.939918279647827 [2, 4, 6, 1, 3, 5, 0]
python3 main.py 8 80 16000 = True 1135 5.002800464630127 [3, 5, 7, 1, 6, 0, 2, 4]
python3 main.py 8 80 16000 = True 1123 5.940325736999512 [7, 1, 3, 0, 6, 4, 2, 5]
python3 main.py 6 60 12000 = True 2255 6.909834861755371 [3, 0, 4, 1, 5, 2]
100.0% of success
[100.0, 100.0, 100.0, 100.0, 100.0]

You can also use backtracking and bruteforce to compare the time:

python3 backtracking.py 15
Solution found in 0.017034292221069336 s :
Q . . . . . . . . . . . . . .
. . . Q . . . . . . . . . . .
. Q . . . . . . . . . . . . .
. . . . . . . Q . . . . . . .
. . Q . . . . . . . . . . . .
. . . . . . . . . . Q . . . .
. . . . . . . . . . . . Q . .
. . . . . . . . . . . . . . Q
. . . . . . . . . Q . . . . .
. . . . Q . . . . . . . . . .
. . . . . . . . . . . . . Q .
. . . . . Q . . . . . . . . .
. . . . . . . . Q . . . . . .
. . . . . . Q . . . . . . . .
. . . . . . . . . . . Q . . .

bruteforce:
python3 bruteforce.py 12
Solution found in 3.619544506072998 s :
Q . . . . . . . . . . .
. . Q . . . . . . . . .
. . . . Q . . . . . . .
. . . . . . . Q . . . .
. . . . . . . . . Q . .
. . . . . . . . . . . Q
. . . . . Q . . . . . .
. . . . . . . . . . Q .
. Q . . . . . . . . . .
. . . . . . Q . . . . .
. . . . . . . . Q . . .
. . . Q . . . . . . . .